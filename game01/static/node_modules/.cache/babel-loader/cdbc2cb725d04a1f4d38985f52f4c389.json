{"ast":null,"code":"var _jsxFileName = \"/Users/jeonghoyeo/toy/monad_games/game01/static/src/components/Playground.tsx\",\n  _s = $RefreshSig$();\nimport './Playground.css'; // CSS 파일을 추가합니다.\n\nimport React, { useEffect, useRef } from 'react';\nimport { useAtom } from 'jotai';\nimport { Bodies, Body, Engine, Events, Mouse, MouseConstraint, Render, Runner, World } from 'matter-js';\nimport { scoreAtom } from '../atoms/scoreAtom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Playground = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const totalScore = useRef(0);\n  const bestScore = useRef(0);\n  const [score, setScore] = useAtom(scoreAtom);\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const engine = Engine.create();\n    const render = Render.create({\n      element: document.body,\n      engine: engine,\n      canvas: canvasRef.current,\n      options: {\n        width: 300,\n        height: 400,\n        background: \"white\",\n        wireframes: false\n      }\n    });\n    const floor = Bodies.rectangle(160, 400, 400, 10, {\n      isStatic: true,\n      collisionFilter: {\n        group: -1\n      },\n      render: {\n        fillStyle: \"blue\"\n      }\n    });\n    const user = Bodies.circle(160, 380, 30, {\n      label: \"user\",\n      render: {\n        sprite: {\n          texture: \"/bibidukbig.png\",\n          xScale: 0.1,\n          yScale: 0.1\n        }\n      }\n    });\n    const infiniteArr = Array.from({\n      length: 15000\n    }).map(() => {\n      return Bodies.circle(Math.random() * 300, 0, 10, {\n        label: \"ball\",\n        restitution: 0.9,\n        collisionFilter: {\n          group: -1\n        },\n        render: {\n          sprite: {\n            texture: \"/poop.png\",\n            xScale: 0.05,\n            yScale: 0.05\n          }\n        }\n      });\n    });\n    const wait = ms => new Promise(resolve => {\n      const timeout = setTimeout(() => {\n        clearTimeout(timeout);\n        resolve();\n      }, ms);\n    });\n    const compositeArr = [];\n    const spreadBall = async ball => {\n      compositeArr.push(ball);\n      World.add(engine.world, compositeArr);\n      await wait(200);\n      compositeArr.pop();\n      World.remove(engine.world, compositeArr);\n    };\n    const event = async () => {\n      for (const ball of infiniteArr) {\n        await spreadBall(ball);\n        totalScore.current = totalScore.current + 1;\n        setScore(totalScore.current);\n      }\n    };\n    Events.on(engine, \"collisionStart\", async function (event) {\n      const isUserDead = event.pairs.some(ev => ev.bodyA.label === \"user\" && ev.bodyB.label === \"ball\" || ev.bodyA.label === \"ball\" && ev.bodyB.label === \"user\");\n      if (isUserDead) {\n        user.render.fillStyle = \"red\"; // 충돌 시 빨간색으로 변경\n        user.render.sprite = undefined; // sprite를 undefined로 설정\n\n        if (bestScore.current < totalScore.current) {\n          bestScore.current = totalScore.current;\n        }\n        totalScore.current = 0;\n        await wait(1000);\n\n        // 초기 위치와 크기로 설정\n        Body.setPosition(user, {\n          x: 160,\n          y: 380\n        });\n        Body.setAngle(user, 0);\n        Body.setVelocity(user, {\n          x: 0,\n          y: 0\n        });\n        Body.setAngularVelocity(user, 0);\n        user.render.fillStyle = undefined;\n        user.render.sprite = {\n          texture: \"/bibidukbig.png\",\n          // 이미지로 다시 설정\n          xScale: 0.1,\n          yScale: 0.1\n        };\n      }\n    });\n    World.add(engine.world, [floor, user]);\n    const runner = Runner.run(engine);\n    Render.run(render);\n    const mouse = Mouse.create(render.canvas);\n    const mouseConstraint = MouseConstraint.create(engine, {\n      mouse\n    });\n    World.add(engine.world, mouseConstraint);\n    event();\n    return () => {\n      Runner.stop(runner);\n      Render.stop(render);\n      World.clear(engine.world, false);\n      Engine.clear(engine);\n    };\n  }, [setScore]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"playground-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"game-title\",\n      children: \"[\\uBAB0\\uB780\\uB2E5 \\uD53C\\uD558\\uAE30 \\uAC8C\\uC784]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"instructions\",\n      children: \"\\uB9C8\\uC6B0\\uC2A4\\uB098 \\uD130\\uCE58\\uB85C \\uBE44\\uBE44\\uB451\\uC744 \\uC6C0\\uC9C1\\uC5EC\\uC8FC\\uC138\\uC694!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"refresh-button\",\n      onClick: () => window.location.reload(),\n      children: \"\\uC798 \\uC548\\uB418\\uBA74 \\uC0C8\\uB85C\\uACE0\\uCE68\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"score\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Score:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), \" \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"best-score\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Best:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), \" \", bestScore.current]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n_s(Playground, \"KzEBrrL1sPjpdEIT1lb6Rr92bO8=\", false, function () {\n  return [useAtom];\n});\n_c = Playground;\nexport default Playground;\nvar _c;\n$RefreshReg$(_c, \"Playground\");","map":{"version":3,"names":["React","useEffect","useRef","useAtom","Bodies","Body","Engine","Events","Mouse","MouseConstraint","Render","Runner","World","scoreAtom","jsxDEV","_jsxDEV","Playground","_s","canvasRef","totalScore","bestScore","score","setScore","current","engine","create","render","element","document","body","canvas","options","width","height","background","wireframes","floor","rectangle","isStatic","collisionFilter","group","fillStyle","user","circle","label","sprite","texture","xScale","yScale","infiniteArr","Array","from","length","map","Math","random","restitution","wait","ms","Promise","resolve","timeout","setTimeout","clearTimeout","compositeArr","spreadBall","ball","push","add","world","pop","remove","event","on","isUserDead","pairs","some","ev","bodyA","bodyB","undefined","setPosition","x","y","setAngle","setVelocity","setAngularVelocity","runner","run","mouse","mouseConstraint","stop","clear","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","window","location","reload","ref","_c","$RefreshReg$"],"sources":["/Users/jeonghoyeo/toy/monad_games/game01/static/src/components/Playground.tsx"],"sourcesContent":["import './Playground.css'; // CSS 파일을 추가합니다.\n\nimport React, {\n  useEffect,\n  useRef,\n} from 'react';\n\nimport { useAtom } from 'jotai';\nimport {\n  Bodies,\n  Body,\n  Engine,\n  Events,\n  Mouse,\n  MouseConstraint,\n  Render,\n  Runner,\n  World,\n} from 'matter-js';\n\nimport { scoreAtom } from '../atoms/scoreAtom';\n\nconst Playground: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const totalScore = useRef<number>(0);\n  const bestScore = useRef<number>(0);\n  const [score, setScore] = useAtom(scoreAtom);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    const engine = Engine.create();\n    const render = Render.create({\n      element: document.body,\n      engine: engine,\n      canvas: canvasRef.current,\n      options: {\n        width: 300,\n        height: 400,\n        background: \"white\",\n        wireframes: false,\n      },\n    });\n\n    const floor = Bodies.rectangle(160, 400, 400, 10, {\n      isStatic: true,\n      collisionFilter: {\n        group: -1,\n      },\n      render: {\n        fillStyle: \"blue\",\n      },\n    });\n\n    const user = Bodies.circle(160, 380, 30, {\n      label: \"user\",\n      render: {\n        sprite: {\n          texture: \"/bibidukbig.png\",\n          xScale: 0.1,\n          yScale: 0.1,\n        },\n      },\n    });\n\n    const infiniteArr = Array.from({ length: 15000 }).map(() => {\n      return Bodies.circle(Math.random() * 300, 0, 10, {\n        label: \"ball\",\n        restitution: 0.9,\n        collisionFilter: {\n          group: -1,\n        },\n        render: {\n          sprite: {\n            texture: \"/poop.png\",\n            xScale: 0.05,\n            yScale: 0.05,\n          },\n        },\n      });\n    });\n\n    const wait = (ms: number) =>\n      new Promise<void>((resolve) => {\n        const timeout = setTimeout(() => {\n          clearTimeout(timeout);\n          resolve();\n        }, ms);\n      });\n\n    const compositeArr: Matter.Body[] = [];\n\n    const spreadBall = async (ball: Matter.Body) => {\n      compositeArr.push(ball);\n      World.add(engine.world, compositeArr);\n      await wait(200);\n      compositeArr.pop();\n      World.remove(engine.world, compositeArr);\n    };\n\n    const event = async () => {\n      for (const ball of infiniteArr) {\n        await spreadBall(ball);\n        totalScore.current = totalScore.current + 1;\n        setScore(totalScore.current);\n      }\n    };\n\n    Events.on(engine, \"collisionStart\", async function (event) {\n      const isUserDead = event.pairs.some(\n        (ev) =>\n          (ev.bodyA.label === \"user\" && ev.bodyB.label === \"ball\") ||\n          (ev.bodyA.label === \"ball\" && ev.bodyB.label === \"user\"),\n      );\n\n      if (isUserDead) {\n        user.render.fillStyle = \"red\"; // 충돌 시 빨간색으로 변경\n        user.render.sprite = undefined; // sprite를 undefined로 설정\n\n        if (bestScore.current < totalScore.current) {\n          bestScore.current = totalScore.current;\n        }\n\n        totalScore.current = 0;\n        await wait(1000);\n\n        // 초기 위치와 크기로 설정\n        Body.setPosition(user, { x: 160, y: 380 });\n        Body.setAngle(user, 0);\n        Body.setVelocity(user, { x: 0, y: 0 });\n        Body.setAngularVelocity(user, 0);\n\n        user.render.fillStyle = undefined;\n        user.render.sprite = {\n          texture: \"/bibidukbig.png\", // 이미지로 다시 설정\n          xScale: 0.1,\n          yScale: 0.1,\n        };\n      }\n    });\n\n    World.add(engine.world, [floor, user]);\n    const runner = Runner.run(engine);\n    Render.run(render);\n\n    const mouse = Mouse.create(render.canvas);\n    const mouseConstraint = MouseConstraint.create(engine, {\n      mouse,\n    });\n    World.add(engine.world, mouseConstraint);\n\n    event();\n\n    return () => {\n      Runner.stop(runner);\n      Render.stop(render);\n      World.clear(engine.world, false);\n      Engine.clear(engine);\n    };\n  }, [setScore]);\n\n  return (\n    <div className=\"playground-container\">\n      <h1 className=\"game-title\">[몰란닥 피하기 게임]</h1>\n      <p className=\"instructions\">마우스나 터치로 비비둑을 움직여주세요!</p>\n      <button\n        className=\"refresh-button\"\n        onClick={() => window.location.reload()}\n      >\n        잘 안되면 새로고침\n      </button>\n      <div className=\"game-info\">\n        <p className=\"score\">\n          <span>Score:</span> {score}\n        </p>\n        <p className=\"best-score\">\n          <span>Best:</span> {bestScore.current}\n        </p>\n      </div>\n      <div className=\"canvas-container\">\n        <canvas ref={canvasRef} />\n      </div>\n    </div>\n  );\n};\n\nexport default Playground;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}